/*
MAVLink protocol implementation for node.js (auto-generated by mavgen_javascript.py)

Generated from: uAvionix.xml

Note: this file has been auto-generated. DO NOT EDIT
*/
jspack = require("jspack").jspack,
    _ = require("underscore"),
    events = require("events"),
    util = require("util");
// Add a convenience method to Buffer
Buffer.prototype.toByteArray = function () {
    return Array.prototype.slice.call(this, 0);
};
mavlink = function () { };
// Implement the X25CRC function (present in the Python version through the mavutil.py package)
mavlink.x25Crc = function (buffer, crc) {
    var bytes = buffer;
    var crc = crc || 0xffff;
    _.each(bytes, function (e) {
        var tmp = e ^ (crc & 0xff);
        tmp = (tmp ^ (tmp << 4)) & 0xff;
        crc = (crc >> 8) ^ (tmp << 8) ^ (tmp << 3) ^ (tmp >> 4);
        crc = crc & 0xffff;
    });
    return crc;
};
mavlink.WIRE_PROTOCOL_VERSION = "1.0";
mavlink.MAVLINK_TYPE_CHAR = 0;
mavlink.MAVLINK_TYPE_UINT8_T = 1;
mavlink.MAVLINK_TYPE_INT8_T = 2;
mavlink.MAVLINK_TYPE_UINT16_T = 3;
mavlink.MAVLINK_TYPE_INT16_T = 4;
mavlink.MAVLINK_TYPE_UINT32_T = 5;
mavlink.MAVLINK_TYPE_INT32_T = 6;
mavlink.MAVLINK_TYPE_UINT64_T = 7;
mavlink.MAVLINK_TYPE_INT64_T = 8;
mavlink.MAVLINK_TYPE_FLOAT = 9;
mavlink.MAVLINK_TYPE_DOUBLE = 10;
// Mavlink headers incorporate sequence, source system (platform) and source component. 
mavlink.header = function (msgId, mlen, seq, srcSystem, srcComponent) {
    this.mlen = (typeof mlen === 'undefined') ? 0 : mlen;
    this.seq = (typeof seq === 'undefined') ? 0 : seq;
    this.srcSystem = (typeof srcSystem === 'undefined') ? 0 : srcSystem;
    this.srcComponent = (typeof srcComponent === 'undefined') ? 0 : srcComponent;
    this.msgId = msgId;
};
mavlink.header.prototype.pack = function () {
    return jspack.Pack('BBBBBB', [254, this.mlen, this.seq, this.srcSystem, this.srcComponent, this.msgId]);
};
// Base class declaration: mavlink.message will be the parent class for each
// concrete implementation in mavlink.messages.
mavlink.message = function () { };
// Convenience setter to facilitate turning the unpacked array of data into member properties
mavlink.message.prototype.set = function (args) {
    _.each(this.fieldnames, function (e, i) {
        this[e] = args[i];
    }, this);
};
// This pack function builds the header and produces a complete MAVLink message,
// including header and message CRC.
mavlink.message.prototype.pack = function (mav, crc_extra, payload) {
    this.payload = payload;
    this.header = new mavlink.header(this.id, payload.length, mav.seq, mav.srcSystem, mav.srcComponent);
    this.msgbuf = this.header.pack().concat(payload);
    var crc = mavlink.x25Crc(this.msgbuf.slice(1));
    // For now, assume always using crc_extra = True.  TODO: check/fix this.
    crc = mavlink.x25Crc([crc_extra], crc);
    this.msgbuf = this.msgbuf.concat(jspack.Pack('<H', [crc]));
    return this.msgbuf;
};
// enums
// UAVIONIX_ADSB_OUT_DYNAMIC_STATE
mavlink.UAVIONIX_ADSB_OUT_DYNAMIC_STATE_INTENT_CHANGE = 1; // 
mavlink.UAVIONIX_ADSB_OUT_DYNAMIC_STATE_AUTOPILOT_ENABLED = 2; // 
mavlink.UAVIONIX_ADSB_OUT_DYNAMIC_STATE_NICBARO_CROSSCHECKED = 4; // 
mavlink.UAVIONIX_ADSB_OUT_DYNAMIC_STATE_ON_GROUND = 8; // 
mavlink.UAVIONIX_ADSB_OUT_DYNAMIC_STATE_IDENT = 16; // 
mavlink.UAVIONIX_ADSB_OUT_DYNAMIC_STATE_ENUM_END = 17; // 
// UAVIONIX_ADSB_OUT_RF_SELECT
mavlink.UAVIONIX_ADSB_OUT_RF_SELECT_STANDBY = 0; // 
mavlink.UAVIONIX_ADSB_OUT_RF_SELECT_RX_ENABLED = 1; // 
mavlink.UAVIONIX_ADSB_OUT_RF_SELECT_TX_ENABLED = 2; // 
mavlink.UAVIONIX_ADSB_OUT_RF_SELECT_ENUM_END = 3; // 
// UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX
mavlink.UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_NONE_0 = 0; // 
mavlink.UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_NONE_1 = 1; // 
mavlink.UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_2D = 2; // 
mavlink.UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_3D = 3; // 
mavlink.UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_DGPS = 4; // 
mavlink.UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_RTK = 5; // 
mavlink.UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_ENUM_END = 6; // 
// UAVIONIX_ADSB_RF_HEALTH
mavlink.UAVIONIX_ADSB_RF_HEALTH_INITIALIZING = 0; // 
mavlink.UAVIONIX_ADSB_RF_HEALTH_OK = 1; // 
mavlink.UAVIONIX_ADSB_RF_HEALTH_FAIL_TX = 2; // 
mavlink.UAVIONIX_ADSB_RF_HEALTH_FAIL_RX = 16; // 
mavlink.UAVIONIX_ADSB_RF_HEALTH_ENUM_END = 17; // 
// UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE
mavlink.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_NO_DATA = 0; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L15M_W23M = 1; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L25M_W28P5M = 2; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L25_34M = 3; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L35_33M = 4; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L35_38M = 5; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L45_39P5M = 6; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L45_45M = 7; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L55_45M = 8; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L55_52M = 9; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L65_59P5M = 10; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L65_67M = 11; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L75_W72P5M = 12; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L75_W80M = 13; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L85_W80M = 14; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L85_W90M = 15; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_ENUM_END = 16; // 
// UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT
mavlink.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_NO_DATA = 0; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_2M = 1; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_4M = 2; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_6M = 3; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_0M = 4; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_2M = 5; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_4M = 6; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_6M = 7; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_ENUM_END = 8; // 
// UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON
mavlink.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON_NO_DATA = 0; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON_APPLIED_BY_SENSOR = 1; // 
mavlink.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON_ENUM_END = 2; // 
// UAVIONIX_ADSB_EMERGENCY_STATUS
mavlink.UAVIONIX_ADSB_OUT_NO_EMERGENCY = 0; // 
mavlink.UAVIONIX_ADSB_OUT_GENERAL_EMERGENCY = 1; // 
mavlink.UAVIONIX_ADSB_OUT_LIFEGUARD_EMERGENCY = 2; // 
mavlink.UAVIONIX_ADSB_OUT_MINIMUM_FUEL_EMERGENCY = 3; // 
mavlink.UAVIONIX_ADSB_OUT_NO_COMM_EMERGENCY = 4; // 
mavlink.UAVIONIX_ADSB_OUT_UNLAWFUL_INTERFERANCE_EMERGENCY = 5; // 
mavlink.UAVIONIX_ADSB_OUT_DOWNED_AIRCRAFT_EMERGENCY = 6; // 
mavlink.UAVIONIX_ADSB_OUT_RESERVED = 7; // 
mavlink.UAVIONIX_ADSB_EMERGENCY_STATUS_ENUM_END = 8; // 
// message IDs
mavlink.MAVLINK_MSG_ID_BAD_DATA = -1;
mavlink.messages = {};
mavlink.map = {};
// Special mavlink message to capture malformed data packets for debugging
mavlink.messages.bad_data = function (data, reason) {
    this.id = mavlink.MAVLINK_MSG_ID_BAD_DATA;
    this.data = data;
    this.reason = reason;
    this.msgbuf = data;
};
/* MAVLink protocol handling class */
MAVLink = function (logger, srcSystem, srcComponent) {
    this.logger = logger;
    this.seq = 0;
    this.buf = new Buffer(0);
    this.bufInError = new Buffer(0);
    this.srcSystem = (typeof srcSystem === 'undefined') ? 0 : srcSystem;
    this.srcComponent = (typeof srcComponent === 'undefined') ? 0 : srcComponent;
    // The first packet we expect is a valid header, 6 bytes.
    this.expected_length = 6;
    this.have_prefix_error = false;
    this.protocol_marker = 254;
    this.little_endian = true;
    this.crc_extra = true;
    this.sort_fields = true;
    this.total_packets_sent = 0;
    this.total_bytes_sent = 0;
    this.total_packets_received = 0;
    this.total_bytes_received = 0;
    this.total_receive_errors = 0;
    this.startup_time = Date.now();
};
// Implements EventEmitter
util.inherits(MAVLink, events.EventEmitter);
// If the logger exists, this function will add a message to it.
// Assumes the logger is a winston object.
MAVLink.prototype.log = function (message) {
    if (this.logger) {
        this.logger.info(message);
    }
};
MAVLink.prototype.log = function (level, message) {
    if (this.logger) {
        this.logger.log(level, message);
    }
};
MAVLink.prototype.send = function (mavmsg) {
    buf = mavmsg.pack(this);
    this.file.write(buf);
    this.seq = (this.seq + 1) % 256;
    this.total_packets_sent += 1;
    this.total_bytes_sent += buf.length;
};
// return number of bytes needed for next parsing stage
MAVLink.prototype.bytes_needed = function () {
    ret = this.expected_length - this.buf.length;
    return (ret <= 0) ? 1 : ret;
};
// add data to the local buffer
MAVLink.prototype.pushBuffer = function (data) {
    if (data) {
        this.buf = Buffer.concat([this.buf, data]);
        this.total_bytes_received += data.length;
    }
};
// Decode prefix.  Elides the prefix.
MAVLink.prototype.parsePrefix = function () {
    // Test for a message prefix.
    if (this.buf.length >= 1 && this.buf[0] != 254) {
        // Strip the offending initial byte and throw an error.
        var badPrefix = this.buf[0];
        this.bufInError = this.buf.slice(0, 1);
        this.buf = this.buf.slice(1);
        this.expected_length = 6;
        // TODO: enable subsequent prefix error suppression if robust_parsing is implemented
        //if(!this.have_prefix_error) {
        //    this.have_prefix_error = true;
        throw new Error("Bad prefix (" + badPrefix + ")");
    }
    //else if( this.buf.length >= 1 && this.buf[0] == 254 ) {
    //    this.have_prefix_error = false;
    //}
};
// Determine the length.  Leaves buffer untouched.
MAVLink.prototype.parseLength = function () {
    if (this.buf.length >= 2) {
        var unpacked = jspack.Unpack('BB', this.buf.slice(0, 2));
        this.expected_length = unpacked[1] + 8; // length of message + header + CRC
    }
};
// input some data bytes, possibly returning a new message
MAVLink.prototype.parseChar = function (c) {
    var m = null;
    try {
        this.pushBuffer(c);
        this.parsePrefix();
        this.parseLength();
        m = this.parsePayload();
    }
    catch (e) {
        this.log('error', e.message);
        this.total_receive_errors += 1;
        m = new mavlink.messages.bad_data(this.bufInError, e.message);
        this.bufInError = new Buffer(0);
    }
    if (null != m) {
        this.emit(m.name, m);
        this.emit('message', m);
    }
    return m;
};
MAVLink.prototype.parsePayload = function () {
    var m = null;
    // If we have enough bytes to try and read it, read it.
    if (this.expected_length >= 8 && this.buf.length >= this.expected_length) {
        // Slice off the expected packet length, reset expectation to be to find a header.
        var mbuf = this.buf.slice(0, this.expected_length);
        // TODO: slicing off the buffer should depend on the error produced by the decode() function
        // - if a message we find a well formed message, cut-off the expected_length
        // - if the message is not well formed (correct prefix by accident), cut-off 1 char only
        this.buf = this.buf.slice(this.expected_length);
        this.expected_length = 6;
        // w.info("Attempting to parse packet, message candidate buffer is ["+mbuf.toByteArray()+"]");
        try {
            m = this.decode(mbuf);
            this.total_packets_received += 1;
        }
        catch (e) {
            // Set buffer in question and re-throw to generic error handling
            this.bufInError = mbuf;
            throw e;
        }
    }
    return m;
};
// input some data bytes, possibly returning an array of new messages
MAVLink.prototype.parseBuffer = function (s) {
    // Get a message, if one is available in the stream.
    var m = this.parseChar(s);
    // No messages available, bail.
    if (null === m) {
        return null;
    }
    // While more valid messages can be read from the existing buffer, add
    // them to the array of new messages and return them.
    var ret = [m];
    while (true) {
        m = this.parseChar();
        if (null === m) {
            // No more messages left.
            return ret;
        }
        ret.push(m);
    }
    return ret;
};
/* decode a buffer as a MAVLink message */
MAVLink.prototype.decode = function (msgbuf) {
    var magic, mlen, seq, srcSystem, srcComponent, unpacked, msgId;
    // decode the header
    try {
        unpacked = jspack.Unpack('cBBBBB', msgbuf.slice(0, 6));
        magic = unpacked[0];
        mlen = unpacked[1];
        seq = unpacked[2];
        srcSystem = unpacked[3];
        srcComponent = unpacked[4];
        msgId = unpacked[5];
    }
    catch (e) {
        throw new Error('Unable to unpack MAVLink header: ' + e.message);
    }
    if (magic.charCodeAt(0) != 254) {
        throw new Error("Invalid MAVLink prefix (" + magic.charCodeAt(0) + ")");
    }
    if (mlen != msgbuf.length - 8) {
        throw new Error("Invalid MAVLink message length.  Got " + (msgbuf.length - 8) + " expected " + mlen + ", msgId=" + msgId);
    }
    if (false === _.has(mavlink.map, msgId)) {
        throw new Error("Unknown MAVLink message ID (" + msgId + ")");
    }
    // decode the payload
    // refs: (fmt, type, order_map, crc_extra) = mavlink.map[msgId]
    var decoder = mavlink.map[msgId];
    // decode the checksum
    try {
        var receivedChecksum = jspack.Unpack('<H', msgbuf.slice(msgbuf.length - 2));
    }
    catch (e) {
        throw new Error("Unable to unpack MAVLink CRC: " + e.message);
    }
    var messageChecksum = mavlink.x25Crc(msgbuf.slice(1, msgbuf.length - 2));
    // Assuming using crc_extra = True.  See the message.prototype.pack() function.
    messageChecksum = mavlink.x25Crc([decoder.crc_extra], messageChecksum);
    if (receivedChecksum != messageChecksum) {
        throw new Error('invalid MAVLink CRC in msgID ' + msgId + ', got 0x' + receivedChecksum + ' checksum, calculated payload checkum as 0x' + messageChecksum);
    }
    // Decode the payload and reorder the fields to match the order map.
    try {
        var t = jspack.Unpack(decoder.format, msgbuf.slice(6, msgbuf.length));
    }
    catch (e) {
        throw new Error('Unable to unpack MAVLink payload type=' + decoder.type + ' format=' + decoder.format + ' payloadLength=' + msgbuf.slice(6, -2).length + ': ' + e.message);
    }
    // Reorder the fields to match the order map
    var args = [];
    _.each(t, function (e, i, l) {
        args[i] = t[decoder.order_map[i]];
    });
    // construct the message object
    try {
        var m = new decoder.type(args);
        m.set.call(m, args);
    }
    catch (e) {
        throw new Error('Unable to instantiate MAVLink message of type ' + decoder.type + ' : ' + e.message);
    }
    m.msgbuf = msgbuf;
    m.payload = msgbuf.slice(6);
    m.crc = receivedChecksum;
    m.header = new mavlink.header(msgId, mlen, seq, srcSystem, srcComponent);
    this.log(m);
    return m;
};
// Expose this code as a module
module.exports = mavlink;
//# sourceMappingURL=mavlink.js.map